# Analyse des param√®tres event_params dans GA4
import streamlit as st
import altair as alt
import duckdb
import pandas as pd

from services import sql_requests
from services.functions import safe_query_wrapper, get_ga4_connection_or_stop
from assets.ui import ui_warning, ui_caption, ui_sep

GA4_DATA = "ga4_data"

# --- En-t√™te ---
st.title("üîç Analyse des `event_params` (dimensions personnalis√©es)")

st.markdown("""
Cette analyse vous permet de v√©rifier si une **dimension personnalis√©e** (comme `category_page`) est bien envoy√©e sur chaque √©v√©nement GA4 (ex : `page_view`).

Cela permet de :
- **D√©tecter des absences de donn√©es** sur des √©v√©nements cens√©s les contenir.
- **Identifier des erreurs d‚Äôimpl√©mentation** dans le dataLayer ou GTM.

### Explication :
Si une dimension est attendue sur un √©v√©nement donn√©, alors :

> üü¢ Nombre d‚Äô√©v√©nements = Nombre d‚Äôoccurrences de cette dimension

Sinon, un **√©cart (delta)** est observ√©, signalant un probl√®me potentiel.
""")

# --- Connexion √† la base ---
with st.spinner("üîå Connexion √† la base DuckDB..."):
    con = get_ga4_connection_or_stop()

# --- Chargement des donn√©es ---
with st.spinner("üì• R√©cup√©ration des donn√©es..."):
    df_custom_dimension = safe_query_wrapper(
        lambda: con.execute(sql_requests.event_and_customdim_checker(GA4_DATA)).df()
    )

# --- Nettoyage des cl√©s ---
df_custom_dimension["key"] = df_custom_dimension["key"].str.replace('"', '', regex=False)

# --- Filtres dynamiques ---
available_events = sorted(df_custom_dimension["event_name"].unique())
available_keys = sorted(df_custom_dimension["key"].unique())

# Cl√©s exclues de la s√©lection par d√©faut
excluded_keys_default = [
    "batch_ordering_id", "batch_page_id", "campaign",
    "engaged_session_event", "engagement_time_msec", "entrances",
    "ignore_referrer", "link_classes", "link_domain", "link_id", "link_url",
    "medium", "outbound", "page_referrer", "percent_scrolled",
    "session_engaged", "source", "term"
]
# S√©lection par d√©faut : tout sauf celles exclues
default_keys = [key for key in available_keys if key not in excluded_keys_default]

ui_sep()
# --- Filtres dynamiques avec colonnes et checkboxes ---
st.markdown("## üéØ Filtres d‚Äôanalyse")

# Mise en page en deux colonnes
col1, col2 = st.columns(2)

with col1:
    st.subheader("Filtre via le nom de l'√©v√©nement")
    select_all_events = st.checkbox("S√©lectionner tous les √©v√©nements (`event_name`)", value=True)
    selected_events = st.multiselect(
        "√âv√©nements √† analyser (`event_name`) :",
        options=available_events,
        default=available_events if select_all_events else [],
        key="multiselect_event_name"
    )

with col2:
    st.subheader("Filtre via le nom de la dimension")
    select_all_keys = st.checkbox("S√©lectionner toutes les dimensions (`event_params.key`)", value=True)
    selected_keys = st.multiselect(
        "Dimensions personnalis√©es (`event_params.key`) :",
        options=available_keys,
        default=default_keys if select_all_keys else [],
        key="multiselect_event_key"
    )
    st.caption("""
    ‚ÑπÔ∏è Certaines dimensions sont exclues par d√©faut car elles n'ont pas vocation √† √™tre dans tous les √©v√©nement.
    (ex. `campaign`, `source`, `link_url`, etc.).

    üëâ Vous pouvez bien s√ªr les inclure manuellement si n√©cessaire.
    """)

ui_sep()
st.markdown("""
### Filtre pour afficher uniquement les lignes avec un delta > 0
""")
show_only_delta = st.checkbox("Afficher seulement les delta > 0", value=True)
ui_sep()

# --- Filtrage des donn√©es ---
filtered_df = df_custom_dimension[
    df_custom_dimension["event_name"].isin(selected_events) &
    df_custom_dimension["key"].isin(selected_keys)
].copy()

# --- Calcul du delta ---
filtered_df["delta"] = filtered_df["total_event"] - filtered_df["custom_dim_number"]

# --- Application du filtre delta > 0 si demand√© ---
if show_only_delta:
    filtered_df = filtered_df[filtered_df["delta"] > 0]

# --- Exploration globale ---
st.markdown("## üìã Exploration filtr√©e des dimensions")
st.data_editor(filtered_df, use_container_width=True)

st.download_button(
    label="üìÑ T√©l√©charger les r√©sultats filtr√©s (CSV)",
    data=filtered_df.to_csv(index=False),
    file_name="ga4_custom_dimensions_filtered.csv"
)

# --- Graphique si donn√©es pr√©sentes ---
if not filtered_df.empty:
    st.markdown(f"""
    ## üìä Visualisation des cl√©s s√©lectionn√©es

    Ce graphique compare le nombre total d‚Äô√©v√©nements √† celui o√π chaque dimension est bien renseign√©e.

    - üü© Pr√©sente : √©v√©nements avec la dimension
    - üü• Absente : √©v√©nements sans la dimension
    - Un √©cart (**delta**) important peut indiquer un probl√®me d‚Äôimpl√©mentation ou de d√©clenchement.
    """)
    ui_sep()

    # Pr√©parer les donn√©es pour Altair (empiler Pr√©sente / Absente)
    melted_df = pd.concat([
        filtered_df[["event_name", "key", "custom_dim_number"]]
        .rename(columns={"custom_dim_number": "value"})
        .assign(type="Pr√©sente"),

        filtered_df[["event_name", "key", "delta"]]
        .rename(columns={"delta": "value"})
        .assign(type="Absente")
    ])

    # Cr√©er une cl√© combin√©e pour l'axe Y
    melted_df["event_key"] = melted_df["event_name"] + " | " + melted_df["key"]

    # Tri personnalis√© : delta d√©croissant (√©v√©nements les plus critiques en haut)
    order = (
        filtered_df
        .assign(event_key=filtered_df["event_name"] + " | " + filtered_df["key"])
        .sort_values("delta", ascending=False)["event_key"]
        .unique()
    )

    # Calcul plus rigoureux bas√© sur les combinaisons event_name + key
    n_combinations = filtered_df[["event_name", "key"]].drop_duplicates().shape[0]
    chart_height = max((n_combinations * 50),300)

    # Cr√©ation du graphique Altair
    chart = alt.Chart(melted_df).mark_bar().encode(
        x=alt.X("value:Q", title="Nombre d'√©v√©nements"),
        y=alt.Y("event_key:N", sort=order.tolist(), title="√âv√©nement | Dimension"),
        color=alt.Color("type:N", scale=alt.Scale(
            domain=["Pr√©sente", "Absente"],
            range=["#00cc66", "#cc0000"]
        )),
        tooltip=["event_name", "key", "type", "value"]
    ).properties(
        width=800,
        height=chart_height,
        title="Pr√©sence des dimensions personnalis√©es par √©v√©nement"
    )

    # Affichage dans Streamlit
    st.altair_chart(chart, use_container_width=True)

else:
    st.info("Aucune donn√©e √† afficher avec les filtres actuels.")

# --- Fermeture & pied de page ---
con.close()
ui_caption()
